#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run streamlit run src/app/chat_app.py
    streamlit run src/app/chat_app.py
"""

import json
import datetime

import streamlit as st

from src.app.interfaces.__init__ import *
from src.app.utils import get_asset_from_text
from src.app.adapters import FinamAPIClient
from src.app.core import call_llm, get_settings
from src.app.core.llm import extract_api_request, create_system_prompt


def main() -> None:  # noqa: C901
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    initialize_app()
    
    st.set_page_config(
        page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", 
        page_icon="ü§ñ", 
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if "messages" not in st.session_state or len(st.session_state.messages) == 0:
        create_welcome_screen()
    else:
    # –ü–æ–∫–∞–∑–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
        st.markdown("""
        <div class="header-container">
            <h1 class="main-header">ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞</h1>
            <p class="subheader">–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</p>
        </div>
        """, unsafe_allow_html=True)

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.markdown("""
        <div class="sidebar-header">
            <div style="font-size: 2rem;">‚öôÔ∏è</div>
            <h2>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –º–æ–¥–µ–ª—å—é
        settings = get_settings()
        st.markdown(f"""
        <div class="sidebar-card">
            <div style="font-size: 0.9rem; opacity: 0.8;">AI –ú–æ–¥–µ–ª—å</div>
            <div style="font-size: 1.1rem; font-weight: 600;">{settings.openrouter_model}</div>
        </div>
        """, unsafe_allow_html=True)

        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True, help="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"):
                st.session_state.messages = []
                st.rerun()
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True, help="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                st.rerun()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        with st.expander("üîê API –ù–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
            api_token = st.text_input(
                "Access Token",
                type="password",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω...",
            )
            api_base_url = st.text_input("API URL", value="https://api.finam.ru", help="API URL")
            account_id = st.text_input("ID —Å—á–µ—Ç–∞", value="", help="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        finam_client = FinamAPIClient(access_token=api_token or None, base_url=api_base_url if api_base_url else None)
        
        if not finam_client.access_token:
            st.markdown("""
            <div style="background: rgba(239,68,68,0.2); padding: 0.75rem; border-radius: 10px; border-left: 4px solid #EF4444;">
                <div style="font-weight: 600;">‚ö†Ô∏è API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</div>
                <div style="font-size: 0.8rem; opacity: 0.8;">–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞</div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="background: rgba(16,185,129,0.2); padding: 0.75rem; border-radius: 10px; border-left: 4px solid #10B981;">
                <div style="font-weight: 600;">‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω</div>
                <div style="font-size: 0.8rem; opacity: 0.8;">–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∞–∫—Ç–∏–≤–µ–Ω</div>
            </div>
            """, unsafe_allow_html=True)


        # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        st.markdown("---")
        st.markdown("### üí¨ –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã")

        quick_queries = {
            "üí∞ –¶–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞": "–ö–∞–∫–∞—è —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞?",
            "üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å": "–ü–æ–∫–∞–∂–∏ –º–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –±–∞–ª–∞–Ω—Å", 
            "üîç –°—Ç–∞–∫–∞–Ω –ì–∞–∑–ø—Ä–æ–º–∞": "–ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –∞–∫—Ü–∏—è–º –ì–∞–∑–ø—Ä–æ–º–∞?",
            "üìà –°–≤–µ—á–∏ YNDX": "–ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ YNDX –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π",
            "‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞": "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?",
            "üë§ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏": "–ü–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"
        }

        for display_text, actual_query in quick_queries.items():
            if st.button(display_text, use_container_width=True, key=f"quick_{display_text}"):
                # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                if "messages" not in st.session_state:
                    st.session_state.messages = []
                st.session_state.messages.append({"role": "user", "content": actual_query})
                st.rerun()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–°–æ–æ–±—â–µ–Ω–∏—è", len(st.session_state.get('messages', [])))
        with col2:
            st.metric("–°–µ—Å—Å–∏—è", "–ê–∫—Ç–∏–≤–Ω–∞" if finam_client.access_token else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞")


    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "messages" not in st.session_state:
        st.session_state.messages = []

        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Finam API –∫–ª–∏–µ–Ω—Ç–∞
    finam_client = FinamAPIClient(access_token=api_token or None, base_url=api_base_url if api_base_url else None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not finam_client.access_token:
        st.sidebar.warning(
            "‚ö†Ô∏è Finam API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FINAM_ACCESS_TOKEN –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—ã—à–µ."
        )
    else:
        st.sidebar.success("‚úÖ Finam API —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
            if "api_request" in message:
                with st.expander("üîç API –∑–∞–ø—Ä–æ—Å"):
                    st.code(f"{message['api_request']['method']} {message['api_request']['path']}", language="http")
                    st.json(message["api_request"]["response"])


    # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
        conversation_history = [{"role": "system", "content": create_system_prompt()}]
        for msg in st.session_state.messages:
            conversation_history.append({"role": msg["role"], "content": msg["content"]})

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é..."):
            try:
                response = call_llm(conversation_history, temperature=0.3)
                assistant_message = response["choices"][0]["message"]["content"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∑–∞–ø—Ä–æ—Å
                method, path = extract_api_request(assistant_message)

                api_data = None
                for _ in range(3):
                    if method is None and path is None:
                        break
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º account_id –µ—Å–ª–∏ –µ—Å—Ç—å
                    if account_id and "{account_id}" in path:  # noqa: RUF027
                        path = path.replace("{account_id}", account_id)

                    if "{symbol:" in path:
                        start = path.index("{symbol:") + len("{symbol:")
                        end = path.index("}")
                        name = path[start: end]
                        asset = get_asset_from_text(name, finam_client)
                        path = path.replace(f"{{symbol:{name}}}", asset)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                    st.info(f"üîç –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å: `{method} {path}`")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å
                    api_response = finam_client.execute_request(method, path)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                    if "error" in api_response:
                        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {api_response.get('error')}")
                        if "details" in api_response:
                            st.error(f"–î–µ—Ç–∞–ª–∏: {api_response['details']}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    with st.expander("üì° –û—Ç–≤–µ—Ç API", expanded=False):
                        st.json(api_response)

                    api_data = {"method": method, "path": path, "response": api_response}

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    conversation_history.append({"role": "assistant", "content": assistant_message})
                    conversation_history.append({
                        "role": "user",
                        "content": f"–≠–Ω–¥–ø–æ–∏–Ω—Ç: {path}\n–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)[:8192]}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π.\n –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                    })

                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    response = call_llm(conversation_history, temperature=0.3)
                    assistant_message = response["choices"][0]["message"]["content"]

                    method, path = extract_api_request(assistant_message)

                st.markdown(assistant_message)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                message_data = {"role": "assistant", "content": assistant_message}
                if api_data:
                    message_data["api_request"] = api_data
                st.session_state.messages.append(message_data)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    create_status_bar()

if __name__ == "__main__":
    main()