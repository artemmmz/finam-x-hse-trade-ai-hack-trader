#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run streamlit run src/app/chat_app.py
    streamlit run src/app/chat_app.py
"""

import json
import datetime

import streamlit as st

from src.app.utils import get_asset_from_text
from src.app.adapters import FinamAPIClient
from src.app.core import call_llm, get_settings
from src.app.core.llm import extract_api_request, create_system_prompt


def main() -> None:  # noqa: C901
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", page_icon="ü§ñ", layout="wide")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞")
    st.caption("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI")

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings = get_settings()
        st.info(f"**–ú–æ–¥–µ–ª—å:** {settings.openrouter_model}")

        # Finam API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("üîë Finam API", expanded=False):
            api_token = st.text_input(
                "Access Token",
                type="password",
                help="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Finam TradeAPI (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FINAM_ACCESS_TOKEN)",
            )
            api_base_url = st.text_input("API Base URL", value="https://api.finam.ru", help="–ë–∞–∑–æ–≤—ã–π URL API")

        account_id = st.text_input("ID —Å—á–µ—Ç–∞", value="", help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.rerun()

        st.markdown("---")
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        st.markdown("""
        - –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞?
        - –ü–æ–∫–∞–∂–∏ –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        - –ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –ì–∞–∑–ø—Ä–æ–º—É?
        - –ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–∏ YNDX –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        - –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?
        - –î–µ—Ç–∞–ª–∏ –º–æ–µ–π —Å–µ—Å—Å–∏–∏
        """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Finam API –∫–ª–∏–µ–Ω—Ç–∞
    finam_client = FinamAPIClient(access_token=api_token or None, base_url=api_base_url if api_base_url else None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not finam_client.access_token:
        st.sidebar.warning(
            "‚ö†Ô∏è Finam API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FINAM_ACCESS_TOKEN –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—ã—à–µ."
        )
    else:
        st.sidebar.success("‚úÖ Finam API —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
            if "api_request" in message:
                with st.expander("üîç API –∑–∞–ø—Ä–æ—Å"):
                    st.code(f"{message['api_request']['method']} {message['api_request']['path']}", language="http")
                    st.json(message["api_request"]["response"])

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
        conversation_history = [{"role": "system", "content": create_system_prompt()}]
        for msg in st.session_state.messages:
            conversation_history.append({"role": msg["role"], "content": msg["content"]})

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é..."):
            try:
                response = call_llm(conversation_history, temperature=0.3)
                assistant_message = response["choices"][0]["message"]["content"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∑–∞–ø—Ä–æ—Å
                method, path = extract_api_request(assistant_message)

                api_data = None
                MAX_REQUESTS = 4
                for req_num in range(MAX_REQUESTS):
                    if method is None and path is None:
                        break
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º account_id –µ—Å–ª–∏ –µ—Å—Ç—å
                    if account_id and "{account_id}" in path:  # noqa: RUF027
                        path = path.replace("{account_id}", account_id)

                    if "{symbol:" in path:
                        start = path.index("{symbol:") + len("{symbol:")
                        end = path.index("}")
                        name = path[start: end]
                        asset = get_asset_from_text(name, finam_client)
                        path = path.replace(f"{{symbol:{name}}}", asset)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                    st.info(f"üîç –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å: `{method} {path}`")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å
                    api_response = finam_client.execute_request(method, path)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                    if "error" in api_response:
                        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {api_response.get('error')}")
                        if "details" in api_response:
                            st.error(f"–î–µ—Ç–∞–ª–∏: {api_response['details']}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    with st.expander("üì° –û—Ç–≤–µ—Ç API", expanded=False):
                        st.json(api_response)

                    api_data = {"method": method, "path": path, "response": api_response}

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    conversation_history.append({"role": "assistant", "content": assistant_message})
                    conversation_history.append({
                        "role": "user",
                        "content": f"–≠–Ω–¥–ø–æ–∏–Ω—Ç: {path}\n"
                                   f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)[:8192]}\n\n"
                                   f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π.\n"
                                   f"–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å." if req_num < MAX_REQUESTS - 1 else "",
                    })

                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    response = call_llm(conversation_history, temperature=0.3)
                    assistant_message = response["choices"][0]["message"]["content"]

                    method, path = extract_api_request(assistant_message)

                st.markdown(assistant_message)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                message_data = {"role": "assistant", "content": assistant_message}
                if api_data:
                    message_data["api_request"] = api_data
                st.session_state.messages.append(message_data)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
